worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11 1.1.1.1 8.8.8.8 valid=300s ipv6=off;
    resolver_timeout 5s;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict providers 1m;
    lua_shared_dict provider_config 1m;
    client_body_buffer_size 10M;
    client_max_body_size 10M;

	init_worker_by_lua_block {
	    local provider_loader = require("provider_loader")
	    local schedule_reload_providers = provider_loader.schedule_reload_providers

		local url = "http://config-health-checker:8080/providers"
		local fallback = "/usr/local/openresty/nginx/providers.json"

	    -- Проверяем ID воркера, чтобы таймеры запускались только в одном процессе
	    if ngx.worker.id() == 0 then  -- Только в первом воркере
	        ngx.log(ngx.ERR, "Starting reload_providers in worker: ", ngx.worker.id())

	        -- Выполняем начальную загрузку провайдеров

	        schedule_reload_providers(url, fallback)

	        -- Запускаем периодическое обновление
	        local delay = 30
	        local handler
	        handler = function()
	            schedule_reload_providers(url, fallback)
	            local ok, err = ngx.timer.at(delay, handler)
	            if not ok then
	                ngx.log(ngx.ERR, "Failed to create timer: ", err)
	            end
	        end

	        local ok, err = ngx.timer.at(delay, handler)
	        if not ok then
	            ngx.log(ngx.ERR, "Failed to create initial timer: ", err)
	        end
	    else
	        ngx.log(ngx.ERR, "Worker ", ngx.worker.id(), " is not starting reload_providers")
	    end
	}

    server {
        listen 8080;
        # HTTP basic authentication
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                local json = require("cjson")
                local http = require("resty.http")

                ngx.log(ngx.ERR, "Should log this message")

                local providers_str = ngx.shared.providers:get("list")
                local providers = json.decode(providers_str)
                local body_data = ngx.req.get_body_data()
                ngx.log(ngx.ERR, "Request body: ", body_data)

                for _, provider in ipairs(providers) do
                    ngx.log(ngx.ERR, "provider: ", provider.url)
                    local httpc = http.new()

                    local res, err = httpc:request_uri(provider.url, {
                        method = ngx.req.get_method(),
                        body = ngx.req.get_body_data(),
                        headers = {
                            ["Content-Type"] = "application/json",
                        },
                        ssl_verify = false,
                        options = { family = ngx.AF_INET }
                    })

                    if not res then
                        ngx.log(ngx.ERR, "HTTP request failed: ", err)
                    else
                        ngx.log(ngx.ERR, "Response body: ", res.body)
                        local ok, decoded_body = pcall(json.decode, res.body)
                        if ok then
                            ngx.say(json.encode(decoded_body))
                            return
                        else
                            ngx.log(ngx.ERR, "Failed to decode response: ", decoded_body)
                        end
                    end
                end

                ngx.status = 502
                ngx.say("All providers failed")
            }
        }
    }
}
