worker_processes 1;
error_log stderr debug;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
	lua_package_path "/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict providers_cache 10m;

    init_worker_by_lua_block {
        local manager = require "providers_manager"
        local providers_cache = ngx.shared.providers_cache

        local function update_providers()
            local file_path = "/usr/local/openresty/nginx/providers.json"

            -- Update providers from the file
			local success, err = pcall(function()
			    manager.cache_providers(providers_cache, file_path)
			end)

			if not success then
			    ngx.log(ngx.ERR, "Failed to update providers: ", err)
			end
        end

        -- Initial loading of providers
        update_providers()

        -- Timer to refresh the provider configuration every 30 seconds
        local ok, err = ngx.timer.every(60, update_providers)
        if not ok then
            ngx.log(ngx.ERR, "Failed to create timer for providers config reload: ", err)
        end
    }


    upstream dynamic_balancer {
        balancer_by_lua_block {
            ngx.log(ngx.ERR, "Balancing request")
            local manager = require "providers_manager"
            local cache = ngx.shared.providers_cache

            -- Pass the default provider from Nginx
            local default_providers = {
                {
                    url = "https://mainnet.infura.io/v3/xxx",
                    auth_header = ""
                }
            }

            -- Track the number of attempts
            if not ngx.ctx.try_count then
                ngx.ctx.try_count = 1
            else
                ngx.ctx.try_count = ngx.ctx.try_count + 1
            end

            ngx.log(ngx.DEBUG, "Attempt: ", ngx.ctx.try_count)

            -- Retrieve the current provider
            local provider, err = manager.get_provider_for_attempt(cache, ngx.ctx.try_count, default_providers)
            if not provider then
                ngx.log(ngx.ERR, "Failed to select provider: ", err)
                return ngx.exit(502) -- All providers have been tried
            end

            ngx.log(ngx.INFO, "Using provider: ", provider.host, " attempt: ", ngx.ctx.try_count)

            local balancer = require "ngx.balancer"
            local ok, set_peer_err = balancer.set_current_peer(provider.host, provider.port)
            if not ok then
                ngx.log(ngx.ERR, "Failed to set peer: ", set_peer_err)
                return ngx.exit(500)
            end

            ngx.log(ngx.INFO, "Successfully set peer: ", provider.host, ":", provider.port)

            if provider.auth_header then
                ngx.req.set_header("Authorization", provider.auth_header)
                ngx.log(ngx.INFO, "Set Authorization header")
            else
                ngx.req.clear_header("Authorization")
                ngx.log(ngx.INFO, "Cleared Authorization header")
            end

            ngx.req.set_header("Host", provider.host)
            ngx.log(ngx.INFO, "Set Host header: ", provider.host)
            ngx.log(ngx.INFO, "Request headers: ", ngx.req.get_headers())
            ngx.log(ngx.INFO, "Request body: ", ngx.var.request_body)
        }
    }
    server {
        listen 8080;
        server_name localhost;

        # Enable HTTP basic authentication
        auth_basic "Restricted Access"; # Text shown in the login prompt
        auth_basic_user_file /etc/nginx/.htpasswd;

        proxy_next_upstream error timeout invalid_header http_429 http_500 http_502 http_503 http_504;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        client_max_body_size 50M;

        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_pass http://dynamic_balancer;

            # Log debug information for incoming requests
            log_subrequest on;
#             access_log /var/log/nginx/access.log;
        }
    }

}

