worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    resolver 1.1.1.1 8.8.8.8 valid=300s ipv6=off;
    resolver_timeout 5s;
    lua_package_path "/usr/local/openresty/site/lualib/?.lua;;";

    lua_shared_dict providers 1m;
    lua_shared_dict provider_config 1m;
        client_body_buffer_size 10M;
        client_max_body_size 10M;

    init_by_lua_block {
        ngx.log(ngx.ERR, "init_by_lua_block")

        local json = require("cjson")
        local function load_providers()
            local file = io.open("/usr/local/openresty/nginx/providers.json", "r")
            if file then
                ngx.log(ngx.ERR, "load_providers")
                local content = file:read("*all")
                file:close()
                local providers = json.decode(content)
                ngx.shared.providers:set("list", content)
                ngx.log(ngx.ERR, "providers: ", content)
                return providers
            end
            return {}
        end

        load_providers()
    }

    init_worker_by_lua_block {
        local json = require("cjson")

        local function reload_providers()
            local file = io.open("/usr/local/openresty/nginx/providers.json", "r")
            if file then
                local content = file:read("*all")
                file:close()
                ngx.shared.providers:set("list", content)
            end
        end

        local delay = 30
        local handler
        handler = function()
            reload_providers()
            ngx.timer.at(delay, handler)
        end

        ngx.timer.at(delay, handler)
    }

    server {
        listen 8080;

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                local json = require("cjson")
                local http = require("resty.http")

                ngx.log(ngx.ERR, "Should log this message")

                local providers_str = ngx.shared.providers:get("list")
                local providers = json.decode(providers_str)
				local body_data = ngx.req.get_body_data()
				ngx.log(ngx.ERR, "Request body: ", body_data)

                for _, provider in ipairs(providers) do
                    ngx.log(ngx.ERR, "provider: ", provider.url)
                    local httpc = http.new()

                    local res, err = httpc:request_uri(provider.url, {
                        method = ngx.req.get_method(),
                        body = ngx.req.get_body_data(),
                        headers = {
                            ["Content-Type"] = "application/json",
                        },
                        ssl_verify = false,
                        options = { family = ngx.AF_INET }
                    })

                    if not res then
                        ngx.log(ngx.ERR, "HTTP request failed: ", err)
                    else
                        ngx.log(ngx.ERR, "Response body: ", res.body)
                        local ok, decoded_body = pcall(json.decode, res.body)
                        if ok then
                            ngx.say(json.encode(decoded_body))
                            return
                        else
                            ngx.log(ngx.ERR, "Failed to decode response: ", decoded_body)
                        end
                    end
                end

                ngx.status = 502
                ngx.say("All providers failed")
            }
        }
    }
}


